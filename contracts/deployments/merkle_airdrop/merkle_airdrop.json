{
  "source": {
    "hash": "0xe15306c1a22fedd01b1a94d1875986fca0b71e51fecfe9bbbff59c35a7db5e57",
    "language": "ink! 6.0.0-alpha.3",
    "compiler": "rustc 1.89.0-nightly",
    "build_info": {
      "build_mode": "Release",
      "cargo_contract_version": "6.0.0-alpha.3",
      "rust_toolchain": "nightly-aarch64-apple-darwin"
    }
  },
  "contract": {
    "name": "merkle_airdrop",
    "version": "0.1.0",
    "authors": [
      "truthixify"
    ]
  },
  "image": null,
  "spec": {
    "constructors": [
      {
        "args": [
          {
            "label": "asset_contract_address",
            "type": {
              "displayName": [
                "Address"
              ],
              "type": 0
            }
          },
          {
            "label": "root",
            "type": {
              "displayName": [],
              "type": 11
            }
          },
          {
            "label": "campaign_end_time",
            "type": {
              "displayName": [
                "u64"
              ],
              "type": 9
            }
          }
        ],
        "default": false,
        "docs": [
          "Create a new Merkle airdrop contract.",
          "",
          "Initializes the distribution campaign by:",
          "- setting the ERC20 asset contract reference,",
          "- committing to the Merkle root,",
          "- configuring the claim window,",
          "- recording the contract owner.",
          "",
          "**Note:** This constructor does not transfer in the campaign tokens.",
          "The caller must invoke [`fund`] immediately after deployment",
          "to lock the tokens needed for the campaign.",
          "",
          "# Arguments",
          "- `asset_contract_address`: address of the asset contract code.",
          "- `root`: Merkle root of the distribution tree.",
          "- `campaign_end_time`: block timestamp when claiming stops.",
          "",
          "# Panics",
          "- If the provided `campaign_end_time` is already in the past."
        ],
        "label": "new",
        "payable": true,
        "returnType": {
          "displayName": [
            "ink_primitives",
            "ConstructorResult"
          ],
          "type": 12
        },
        "selector": "0x9bae9d5e"
      }
    ],
    "docs": [],
    "environment": {
      "accountId": {
        "displayName": [
          "AccountId"
        ],
        "type": 24
      },
      "balance": {
        "displayName": [
          "Balance"
        ],
        "type": 25
      },
      "blockNumber": {
        "displayName": [
          "BlockNumber"
        ],
        "type": 21
      },
      "hash": {
        "displayName": [
          "Hash"
        ],
        "type": 26
      },
      "nativeToEthRatio": 100000000,
      "staticBufferSize": 16384,
      "timestamp": {
        "displayName": [
          "Timestamp"
        ],
        "type": 9
      }
    },
    "events": [
      {
        "args": [
          {
            "docs": [
              "The address of the recipient."
            ],
            "indexed": true,
            "label": "recipient",
            "type": {
              "displayName": [
                "Address"
              ],
              "type": 0
            }
          },
          {
            "docs": [
              "Amount of tokens claimed."
            ],
            "indexed": false,
            "label": "value",
            "type": {
              "displayName": [
                "U256"
              ],
              "type": 14
            }
          }
        ],
        "docs": [
          "Event emitted when a recipient successfully claims their airdrop."
        ],
        "label": "Claimed",
        "module_path": "merkle_airdrop::merke_airdrop",
        "signature_topic": "0xc9b85900935b13edb8cc66a6e1213d9467aa22b3f8d2197c081fd1b175814982"
      }
    ],
    "lang_error": {
      "displayName": [
        "ink",
        "LangError"
      ],
      "type": 13
    },
    "messages": [
      {
        "args": [
          {
            "label": "total_airdrop_amount",
            "type": {
              "displayName": [
                "U256"
              ],
              "type": 14
            }
          }
        ],
        "default": false,
        "docs": [
          " Fund the Merkle airdrop campaign.",
          "",
          " Locks the specified amount of ERC20-compatible tokens",
          " into the contract, so they can later be claimed by recipients.",
          "",
          " # Arguments",
          " - `total_airdrop_amount`: amount of tokens to transfer from the caller",
          "   into the contract for distribution.",
          "",
          " # Behavior",
          " - Transfers `total_airdrop_amount` tokens from the caller into this contract.",
          " - Requires the caller to have approved this contract to spend",
          "   at least `total_airdrop_amount` tokens beforehand.",
          "",
          " # Errors",
          " - [`Error::AmountCannotBeZero`]: if the amount is zero.",
          " - [`Error::TransferFailed`]: if the token transfer fails."
        ],
        "label": "fund",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 16
        },
        "selector": "0x4aafa343"
      },
      {
        "args": [
          {
            "label": "value",
            "type": {
              "displayName": [
                "U256"
              ],
              "type": 14
            }
          },
          {
            "label": "proof",
            "type": {
              "displayName": [
                "Vec"
              ],
              "type": 19
            }
          },
          {
            "label": "index",
            "type": {
              "displayName": [
                "u64"
              ],
              "type": 9
            }
          }
        ],
        "default": false,
        "docs": [
          " Claim tokens from the Merkle airdrop.",
          "",
          " # Arguments",
          " - `value`: claim amount for the recipient.",
          " - `proof`: Merkle proof for `(recipient, value)`.",
          " - `index`: leaf index in the Merkle tree.",
          "",
          " # Errors",
          " - [`Error::AlreadyClaimed`]: if recipient already claimed.",
          " - [`Error::InvalidProof`]: if Merkle proof does not validate.",
          " - [`Error::TransferFailed`]: if token transfer fails.",
          " - [`Error::ClaimPeriodOver`]: if campaign already ended."
        ],
        "label": "claim",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 16
        },
        "selector": "0xb388803f"
      },
      {
        "args": [],
        "default": false,
        "docs": [
          " Sweep unclaimed tokens after the campaign has ended.",
          "",
          " Transfers the remaining balance from the contract back to the owner.",
          "",
          " # Errors",
          " - [`Error::Unauthorized`]: if caller is not the owner.",
          " - [`Error::ClaimPeriodActive`]: if the claim window is still open."
        ],
        "label": "sweep_unclaimed",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 16
        },
        "selector": "0x760a0245"
      },
      {
        "args": [],
        "default": false,
        "docs": [
          " Get the token asset id of the asset contract."
        ],
        "label": "asset_id",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 20
        },
        "selector": "0x2d42294e"
      },
      {
        "args": [],
        "default": false,
        "docs": [
          " Get the Merkle root."
        ],
        "label": "root",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 22
        },
        "selector": "0x0859bfce"
      },
      {
        "args": [
          {
            "label": "recipient",
            "type": {
              "displayName": [
                "Address"
              ],
              "type": 0
            }
          }
        ],
        "default": false,
        "docs": [
          " Check if a recipient has already claimed."
        ],
        "label": "is_claimed",
        "mutates": false,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 23
        },
        "selector": "0xc58eed46"
      }
    ]
  },
  "storage": {
    "root": {
      "layout": {
        "struct": {
          "fields": [
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "struct": {
                          "fields": [
                            {
                              "layout": {
                                "leaf": {
                                  "key": "0x00000000",
                                  "ty": 0
                                }
                              },
                              "name": "addr"
                            }
                          ],
                          "name": "CallBuilder"
                        }
                      },
                      "name": "inner"
                    }
                  ],
                  "name": "AssetHubPrecompileRefFor"
                }
              },
              "name": "asset_contract"
            },
            {
              "layout": {
                "array": {
                  "layout": {
                    "leaf": {
                      "key": "0x00000000",
                      "ty": 2
                    }
                  },
                  "len": 32,
                  "offset": "0x00000000"
                }
              },
              "name": "root"
            },
            {
              "layout": {
                "root": {
                  "layout": {
                    "leaf": {
                      "key": "0xca01dd85",
                      "ty": 3
                    }
                  },
                  "root_key": "0xca01dd85",
                  "ty": 4
                }
              },
              "name": "claimed"
            },
            {
              "layout": {
                "leaf": {
                  "key": "0x00000000",
                  "ty": 0
                }
              },
              "name": "owner"
            },
            {
              "layout": {
                "leaf": {
                  "key": "0x00000000",
                  "ty": 9
                }
              },
              "name": "campaign_end_time"
            }
          ],
          "name": "MerkleAirdrop"
        }
      },
      "root_key": "0x00000000",
      "ty": 10
    }
  },
  "types": [
    {
      "id": 0,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "type": 1,
                "typeName": "[u8; 20]"
              }
            ]
          }
        },
        "path": [
          "primitive_types",
          "H160"
        ]
      }
    },
    {
      "id": 1,
      "type": {
        "def": {
          "array": {
            "len": 20,
            "type": 2
          }
        }
      }
    },
    {
      "id": 2,
      "type": {
        "def": {
          "primitive": "u8"
        }
      }
    },
    {
      "id": 3,
      "type": {
        "def": {
          "primitive": "bool"
        }
      }
    },
    {
      "id": 4,
      "type": {
        "def": {
          "composite": {}
        },
        "params": [
          {
            "name": "K",
            "type": 0
          },
          {
            "name": "V",
            "type": 3
          },
          {
            "name": "KeyType",
            "type": 5
          }
        ],
        "path": [
          "ink_storage",
          "lazy",
          "mapping",
          "Mapping"
        ]
      }
    },
    {
      "id": 5,
      "type": {
        "def": {
          "composite": {}
        },
        "params": [
          {
            "name": "L",
            "type": 6
          },
          {
            "name": "R",
            "type": 7
          }
        ],
        "path": [
          "ink_storage_traits",
          "impls",
          "ResolverKey"
        ]
      }
    },
    {
      "id": 6,
      "type": {
        "def": {
          "composite": {}
        },
        "path": [
          "ink_storage_traits",
          "impls",
          "AutoKey"
        ]
      }
    },
    {
      "id": 7,
      "type": {
        "def": {
          "composite": {}
        },
        "params": [
          {
            "name": "ParentKey",
            "type": 8
          }
        ],
        "path": [
          "ink_storage_traits",
          "impls",
          "ManualKey"
        ]
      }
    },
    {
      "id": 8,
      "type": {
        "def": {
          "tuple": []
        }
      }
    },
    {
      "id": 9,
      "type": {
        "def": {
          "primitive": "u64"
        }
      }
    },
    {
      "id": 10,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "asset_contract",
                "type": 0,
                "typeName": "<AssetHubPrecompileRef as::ink::storage::traits::AutoStorableHint<\n::ink::storage::traits::ManualKey<1275850399u32, ()>,>>::Type"
              },
              {
                "name": "root",
                "type": 11,
                "typeName": "<[u8; 32] as::ink::storage::traits::AutoStorableHint<::ink::\nstorage::traits::ManualKey<429599124u32, ()>,>>::Type"
              },
              {
                "name": "claimed",
                "type": 4,
                "typeName": "<Mapping<Address, bool> as::ink::storage::traits::AutoStorableHint\n<::ink::storage::traits::ManualKey<2245853642u32, ()>,>>::Type"
              },
              {
                "name": "owner",
                "type": 0,
                "typeName": "<Address as::ink::storage::traits::AutoStorableHint<::ink::\nstorage::traits::ManualKey<3370191838u32, ()>,>>::Type"
              },
              {
                "name": "campaign_end_time",
                "type": 9,
                "typeName": "<u64 as::ink::storage::traits::AutoStorableHint<::ink::storage\n::traits::ManualKey<2058600602u32, ()>,>>::Type"
              }
            ]
          }
        },
        "path": [
          "merkle_airdrop",
          "merke_airdrop",
          "MerkleAirdrop"
        ]
      }
    },
    {
      "id": 11,
      "type": {
        "def": {
          "array": {
            "len": 32,
            "type": 2
          }
        }
      }
    },
    {
      "id": 12,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 8
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 13
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 8
          },
          {
            "name": "E",
            "type": 13
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 13,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "index": 1,
                "name": "CouldNotReadInput"
              }
            ]
          }
        },
        "path": [
          "ink_primitives",
          "LangError"
        ]
      }
    },
    {
      "id": 14,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "type": 15,
                "typeName": "[u64; 4]"
              }
            ]
          }
        },
        "path": [
          "primitive_types",
          "U256"
        ]
      }
    },
    {
      "id": 15,
      "type": {
        "def": {
          "array": {
            "len": 4,
            "type": 9
          }
        }
      }
    },
    {
      "id": 16,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 17
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 13
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 17
          },
          {
            "name": "E",
            "type": 13
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 17,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 8
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 18
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 8
          },
          {
            "name": "E",
            "type": 18
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 18,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "index": 0,
                "name": "TransferFailed"
              },
              {
                "index": 1,
                "name": "InvalidProof"
              },
              {
                "index": 2,
                "name": "AlreadyClaimed"
              },
              {
                "index": 3,
                "name": "AmountCannotBeZero"
              },
              {
                "index": 4,
                "name": "Unauthorized"
              },
              {
                "index": 5,
                "name": "ClaimPeriodOver"
              },
              {
                "index": 6,
                "name": "ClaimPeriodActive"
              }
            ]
          }
        },
        "path": [
          "merkle_airdrop",
          "merke_airdrop",
          "Error"
        ]
      }
    },
    {
      "id": 19,
      "type": {
        "def": {
          "sequence": {
            "type": 11
          }
        }
      }
    },
    {
      "id": 20,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 21
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 13
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 21
          },
          {
            "name": "E",
            "type": 13
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 21,
      "type": {
        "def": {
          "primitive": "u32"
        }
      }
    },
    {
      "id": 22,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 11
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 13
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 11
          },
          {
            "name": "E",
            "type": 13
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 23,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 3
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 13
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 3
          },
          {
            "name": "E",
            "type": 13
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 24,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "type": 11,
                "typeName": "[u8; 32]"
              }
            ]
          }
        },
        "path": [
          "ink_primitives",
          "types",
          "AccountId"
        ]
      }
    },
    {
      "id": 25,
      "type": {
        "def": {
          "primitive": "u128"
        }
      }
    },
    {
      "id": 26,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "type": 11,
                "typeName": "[u8; 32]"
              }
            ]
          }
        },
        "path": [
          "ink_primitives",
          "types",
          "Hash"
        ]
      }
    }
  ],
  "version": 6
}