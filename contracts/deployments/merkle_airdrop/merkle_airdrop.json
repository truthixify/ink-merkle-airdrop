{
  "source": {
    "hash": "0xb877f68ff645412b5ab647d943aeb09dd445de03ada3d10f0a41495e471f8b67",
    "language": "ink! 6.0.0-alpha.1",
    "compiler": "rustc 1.89.0-nightly",
    "build_info": {
      "build_mode": "Release",
      "cargo_contract_version": "6.0.0-alpha.1",
      "rust_toolchain": "nightly-aarch64-apple-darwin"
    }
  },
  "contract": {
    "name": "merkle_airdrop",
    "version": "6.0.0-alpha.1",
    "authors": [
      "truthixify"
    ]
  },
  "image": null,
  "spec": {
    "constructors": [
      {
        "args": [
          {
            "label": "erc20_contract_code_hash",
            "type": {
              "displayName": [
                "ink",
                "H256"
              ],
              "type": 5
            }
          },
          {
            "label": "ref_time_limit",
            "type": {
              "displayName": [
                "u64"
              ],
              "type": 6
            }
          },
          {
            "label": "proof_size_limit",
            "type": {
              "displayName": [
                "u64"
              ],
              "type": 6
            }
          },
          {
            "label": "storage_deposit_limit",
            "type": {
              "displayName": [
                "U256"
              ],
              "type": 7
            }
          },
          {
            "label": "root",
            "type": {
              "displayName": [],
              "type": 4
            }
          },
          {
            "label": "total_supply",
            "type": {
              "displayName": [
                "U256"
              ],
              "type": 7
            }
          }
        ],
        "default": false,
        "docs": [
          "Initializes the contract by instantiating the code at the given code hash via",
          "`instantiate` host function with the supplied weight and storage",
          "limits."
        ],
        "label": "new_with_limits",
        "payable": false,
        "returnType": {
          "displayName": [
            "ink_primitives",
            "ConstructorResult"
          ],
          "type": 9
        },
        "selector": "0xd77d1fca"
      },
      {
        "args": [
          {
            "label": "erc20_contract_code_hash",
            "type": {
              "displayName": [
                "ink",
                "H256"
              ],
              "type": 5
            }
          },
          {
            "label": "root",
            "type": {
              "displayName": [],
              "type": 4
            }
          },
          {
            "label": "total_supply",
            "type": {
              "displayName": [
                "U256"
              ],
              "type": 7
            }
          }
        ],
        "default": false,
        "docs": [
          "Initializes the contract by instantiating the code at the given code hash via",
          "the `instantiate` host function with no weight or storage limits."
        ],
        "label": "new_no_limits",
        "payable": false,
        "returnType": {
          "displayName": [
            "ink_primitives",
            "ConstructorResult"
          ],
          "type": 9
        },
        "selector": "0x0d1737b7"
      }
    ],
    "docs": [],
    "environment": {
      "accountId": {
        "displayName": [
          "AccountId"
        ],
        "type": 14
      },
      "balance": {
        "displayName": [
          "Balance"
        ],
        "type": 17
      },
      "blockNumber": {
        "displayName": [
          "BlockNumber"
        ],
        "type": 19
      },
      "chainExtension": {
        "displayName": [
          "ChainExtension"
        ],
        "type": 20
      },
      "hash": {
        "displayName": [
          "Hash"
        ],
        "type": 18
      },
      "maxEventTopics": 4,
      "staticBufferSize": 16384,
      "timestamp": {
        "displayName": [
          "Timestamp"
        ],
        "type": 6
      }
    },
    "events": [
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "from",
            "type": {
              "displayName": [
                "Option"
              ],
              "type": 16
            }
          },
          {
            "docs": [],
            "indexed": true,
            "label": "to",
            "type": {
              "displayName": [
                "Option"
              ],
              "type": 16
            }
          },
          {
            "docs": [],
            "indexed": false,
            "label": "value",
            "type": {
              "displayName": [
                "U256"
              ],
              "type": 7
            }
          }
        ],
        "docs": [
          "Event emitted when a token transfer occurs."
        ],
        "label": "Transfer",
        "module_path": "erc20::erc20",
        "signature_topic": "0x2bf04b1fcc64de43ce9704e9ccdc0657018c43d01c3e88bceed23cba23a10f5c"
      },
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "owner",
            "type": {
              "displayName": [
                "Address"
              ],
              "type": 0
            }
          },
          {
            "docs": [],
            "indexed": true,
            "label": "spender",
            "type": {
              "displayName": [
                "Address"
              ],
              "type": 0
            }
          },
          {
            "docs": [],
            "indexed": false,
            "label": "value",
            "type": {
              "displayName": [
                "U256"
              ],
              "type": 7
            }
          }
        ],
        "docs": [
          "Event emitted when an approval occurs that `spender` is allowed to withdraw",
          "up to the amount of `value` tokens from `owner`."
        ],
        "label": "Approval",
        "module_path": "erc20::erc20",
        "signature_topic": "0xa1d96b3a6e369c8b0ee68c99cb4406104190a21b35f7ef8fa2bcef30a78efc1a"
      },
      {
        "args": [
          {
            "docs": [],
            "indexed": true,
            "label": "recipient",
            "type": {
              "displayName": [
                "Address"
              ],
              "type": 0
            }
          },
          {
            "docs": [],
            "indexed": false,
            "label": "value",
            "type": {
              "displayName": [
                "U256"
              ],
              "type": 7
            }
          }
        ],
        "docs": [
          "Event emitted when a recipient claims airdrop."
        ],
        "label": "Claimed",
        "module_path": "merkle_airdrop::merke_airdrop",
        "signature_topic": "0xc9b85900935b13edb8cc66a6e1213d9467aa22b3f8d2197c081fd1b175814982"
      }
    ],
    "lang_error": {
      "displayName": [
        "ink",
        "LangError"
      ],
      "type": 11
    },
    "messages": [
      {
        "args": [
          {
            "label": "amount",
            "type": {
              "displayName": [
                "U256"
              ],
              "type": 7
            }
          }
        ],
        "default": false,
        "docs": [],
        "label": "fund",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 9
        },
        "selector": "0x4aafa343"
      },
      {
        "args": [
          {
            "label": "value",
            "type": {
              "displayName": [
                "U256"
              ],
              "type": 7
            }
          },
          {
            "label": "proof",
            "type": {
              "displayName": [
                "Vec"
              ],
              "type": 12
            }
          },
          {
            "label": "index",
            "type": {
              "displayName": [
                "u64"
              ],
              "type": 6
            }
          }
        ],
        "default": false,
        "docs": [],
        "label": "claim",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 9
        },
        "selector": "0xb388803f"
      },
      {
        "args": [],
        "default": false,
        "docs": [
          " Get the address of the other contract after it has been instantiated. We can",
          " use this so we can call the other contract on the frontend."
        ],
        "label": "erc20_account_id",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 13
        },
        "selector": "0xadbca5cf"
      },
      {
        "args": [],
        "default": false,
        "docs": [],
        "label": "erc20_address",
        "mutates": true,
        "payable": false,
        "returnType": {
          "displayName": [
            "ink",
            "MessageResult"
          ],
          "type": 15
        },
        "selector": "0x9dd2c4c3"
      }
    ]
  },
  "storage": {
    "root": {
      "layout": {
        "struct": {
          "fields": [
            {
              "layout": {
                "struct": {
                  "fields": [
                    {
                      "layout": {
                        "struct": {
                          "fields": [
                            {
                              "layout": {
                                "leaf": {
                                  "key": "0x00000000",
                                  "ty": 0
                                }
                              },
                              "name": "addr"
                            }
                          ],
                          "name": "CallBuilder"
                        }
                      },
                      "name": "inner"
                    }
                  ],
                  "name": "Erc20Ref"
                }
              },
              "name": "erc20_contract"
            },
            {
              "layout": {
                "array": {
                  "layout": {
                    "leaf": {
                      "key": "0x00000000",
                      "ty": 2
                    }
                  },
                  "len": 32,
                  "offset": "0x00000000"
                }
              },
              "name": "root"
            }
          ],
          "name": "MerkleAirdrop"
        }
      },
      "root_key": "0x00000000",
      "ty": 3
    }
  },
  "types": [
    {
      "id": 0,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "type": 1,
                "typeName": "[u8; 20]"
              }
            ]
          }
        },
        "path": [
          "primitive_types",
          "H160"
        ]
      }
    },
    {
      "id": 1,
      "type": {
        "def": {
          "array": {
            "len": 20,
            "type": 2
          }
        }
      }
    },
    {
      "id": 2,
      "type": {
        "def": {
          "primitive": "u8"
        }
      }
    },
    {
      "id": 3,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "name": "erc20_contract",
                "type": 0,
                "typeName": "<Erc20Ref as::ink::storage::traits::AutoStorableHint<::ink::\nstorage::traits::ManualKey<1143898168u32, ()>,>>::Type"
              },
              {
                "name": "root",
                "type": 4,
                "typeName": "<[u8; 32] as::ink::storage::traits::AutoStorableHint<::ink::\nstorage::traits::ManualKey<429599124u32, ()>,>>::Type"
              }
            ]
          }
        },
        "path": [
          "merkle_airdrop",
          "merke_airdrop",
          "MerkleAirdrop"
        ]
      }
    },
    {
      "id": 4,
      "type": {
        "def": {
          "array": {
            "len": 32,
            "type": 2
          }
        }
      }
    },
    {
      "id": 5,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "type": 4,
                "typeName": "[u8; 32]"
              }
            ]
          }
        },
        "path": [
          "primitive_types",
          "H256"
        ]
      }
    },
    {
      "id": 6,
      "type": {
        "def": {
          "primitive": "u64"
        }
      }
    },
    {
      "id": 7,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "type": 8,
                "typeName": "[u64; 4]"
              }
            ]
          }
        },
        "path": [
          "primitive_types",
          "U256"
        ]
      }
    },
    {
      "id": 8,
      "type": {
        "def": {
          "array": {
            "len": 4,
            "type": 6
          }
        }
      }
    },
    {
      "id": 9,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 10
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 11
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 10
          },
          {
            "name": "E",
            "type": 11
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 10,
      "type": {
        "def": {
          "tuple": []
        }
      }
    },
    {
      "id": 11,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "index": 1,
                "name": "CouldNotReadInput"
              }
            ]
          }
        },
        "path": [
          "ink_primitives",
          "LangError"
        ]
      }
    },
    {
      "id": 12,
      "type": {
        "def": {
          "sequence": {
            "type": 4
          }
        }
      }
    },
    {
      "id": 13,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 14
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 11
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 14
          },
          {
            "name": "E",
            "type": 11
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 14,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "type": 4,
                "typeName": "[u8; 32]"
              }
            ]
          }
        },
        "path": [
          "ink_primitives",
          "types",
          "AccountId"
        ]
      }
    },
    {
      "id": 15,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "fields": [
                  {
                    "type": 0
                  }
                ],
                "index": 0,
                "name": "Ok"
              },
              {
                "fields": [
                  {
                    "type": 11
                  }
                ],
                "index": 1,
                "name": "Err"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 0
          },
          {
            "name": "E",
            "type": 11
          }
        ],
        "path": [
          "Result"
        ]
      }
    },
    {
      "id": 16,
      "type": {
        "def": {
          "variant": {
            "variants": [
              {
                "index": 0,
                "name": "None"
              },
              {
                "fields": [
                  {
                    "type": 0
                  }
                ],
                "index": 1,
                "name": "Some"
              }
            ]
          }
        },
        "params": [
          {
            "name": "T",
            "type": 0
          }
        ],
        "path": [
          "Option"
        ]
      }
    },
    {
      "id": 17,
      "type": {
        "def": {
          "primitive": "u128"
        }
      }
    },
    {
      "id": 18,
      "type": {
        "def": {
          "composite": {
            "fields": [
              {
                "type": 4,
                "typeName": "[u8; 32]"
              }
            ]
          }
        },
        "path": [
          "ink_primitives",
          "types",
          "Hash"
        ]
      }
    },
    {
      "id": 19,
      "type": {
        "def": {
          "primitive": "u32"
        }
      }
    },
    {
      "id": 20,
      "type": {
        "def": {
          "variant": {}
        },
        "path": [
          "ink_primitives",
          "types",
          "NoChainExtension"
        ]
      }
    }
  ],
  "version": 6
}